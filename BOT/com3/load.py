import logging
import mysql.connector
import mysql.connector.pooling
import random
import asyncio
from datetime import datetime, timedelta, date
import pytz
import configparser
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

db_config = {
    'host': '37.140.192.16',
    'user': 'u3076068_lorenzo',
    'password': 'lorenzo12',
    'database': 'u3076068_nintendo_eshkere',
    'port': 3306,
    'pool_name': 'nintendo_pool',
    'pool_size': 5
}

db_pool = mysql.connector.pooling.MySQLConnectionPool(**db_config)

def get_db_connection():
    try:
        conn = db_pool.get_connection()
        if conn is None:
            logger.error("Failed to get database connection: pool returned None")
            return None
        return conn
    except mysql.connector.Error as e:
        logger.error(f"Failed to get database connection: {e}")
        return None

def is_telegram_linked(telegram_username):
    if not telegram_username:
        logger.warning("No telegram_username provided for is_telegram_linked")
        return False
    try:
        with get_db_connection() as conn, conn.cursor() as cursor:
            if conn is None:
                logger.error("No database connection available for is_telegram_linked")
                return False
            cursor.execute(
                "SELECT is_linked FROM telegram_links WHERE telegram_username = %s AND is_linked = %s",
                (telegram_username, True)
            )
            result = cursor.fetchone()
            logger.info(f"is_telegram_linked: queried username={telegram_username}, result={result}")
            return result is not None and result[0]
    except mysql.connector.Error as e:
        logger.error(f"Database error in is_telegram_linked: {e}")
        return False

def link_telegram_account(telegram_id, telegram_username, code):
    if not telegram_username:
        return False, "üö´ –û—à–∏–±–∫–∞: —É –≤–∞—à–µ–≥–æ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username)"
    try:
        with get_db_connection() as conn, conn.cursor() as cursor:
            if conn is None:
                logger.error("No database connection available for link_telegram_account")
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            cursor.execute(
                "SELECT id, user_id FROM telegram_links WHERE telegram_code = %s AND is_linked = %s",
                (code, False)
            )
            result = cursor.fetchone()
            if not result:
                logger.warning(f"Invalid or already used code: {code}")
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
            link_id, linked_user_id = result
            cursor.execute(
                "UPDATE telegram_links SET telegram_username = %s, telegram_id = %s, is_linked = %s, updated_at = %s WHERE id = %s",
                (telegram_username, telegram_id, True, datetime.now(pytz.timezone('Europe/Moscow')), link_id)
            )
            conn.commit()
            logger.info(f"Linked Telegram account: telegram_id={telegram_id}, telegram_username={telegram_username}, linked_user_id={linked_user_id}")
            return True, "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!"
    except mysql.connector.Error as e:
        logger.error(f"Database error in link_telegram_account: {e}")
        return False, f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}"

def is_computer_booked(comp_id, hour):
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    booking_date = now.date() if now.hour < 19 else (now + timedelta(days=1)).date()
    try:
        with get_db_connection() as conn, conn.cursor() as cursor:
            if conn is None:
                return False
            cursor.execute(
                "SELECT COUNT(*) FROM bookings WHERE computer_id = %s AND booking_time = %s AND booking_date = %s",
                (comp_id, hour, booking_date)
            )
            return cursor.fetchone()[0] > 0
    except mysql.connector.Error as e:
        logger.error(f"Database error in is_computer_booked: {e}")
        return False

def cleanup_expired_bookings():
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    try:
        with get_db_connection() as conn, conn.cursor() as cursor:
            if conn is None:
                return
            cursor.execute("SELECT booking_id, booking_time, booking_date FROM bookings")
            bookings = cursor.fetchall()
            for booking_id, booking_time, booking_date in bookings:
                try:
                    booking_datetime = datetime.combine(booking_date, datetime.min.time()) + timedelta(hours=booking_time)
                    booking_datetime = pytz.timezone('Europe/Moscow').localize(booking_datetime)
                    if now >= booking_datetime + timedelta(hours=1):
                        cursor.execute("DELETE FROM bookings WHERE booking_id = %s", (booking_id,))
                except ValueError:
                    logger.warning(f"Invalid booking date for booking_id {booking_id}")
            conn.commit()
    except mysql.connector.Error as e:
        logger.error(f"Database error in cleanup_expired_bookings: {e}")

def get_user_booking_count(user_id):
    cleanup_expired_bookings()
    try:
        with get_db_connection() as conn, conn.cursor() as cursor:
            if conn is None:
                return 0
            cursor.execute("SELECT COUNT(*) FROM bookings WHERE user_id = %s", (user_id,))
            return cursor.fetchone()[0]
    except mysql.connector.Error as e:
        logger.error(f"Database error in get_user_booking_count: {e}")
        return 0

def generate_booking_code():
    tries = 0
    max_tries = 5
    while tries < max_tries:
        try:
            with get_db_connection() as conn, conn.cursor() as cursor:
                if conn is None:
                    return None
                code = str(random.randint(1000, 9999))
                cursor.execute("SELECT COUNT(*) FROM bookings WHERE booking_id = %s", (code,))
                if cursor.fetchone()[0] == 0:
                    return code
                tries += 1
                logger.warning(f"Duplicate booking_id {code}, retry {tries}/{max_tries}")
        except mysql.connector.Error as e:
            logger.error(f"Database error in generate_booking_code: {e}")
            return None
    logger.error(f"Failed to generate unique booking_id after {max_tries} tries")
    return None

def book_computer(user_id, comp_id, hour, phone_number, telegram_username, telegram_id):
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    booking_date = now.date() if now.hour < 19 else (now + timedelta(days=1)).date()
    booking_id = generate_booking_code()
    if not booking_id:
        logger.error("Failed to generate booking_id")
        return None
    try:
        with get_db_connection() as conn, conn.cursor() as cursor:
            if conn is None:
                logger.error("No database connection available")
                return None
            cursor.execute(
                "INSERT INTO bookings (booking_id, user_id, computer_id, booking_time, booking_date, phone_number, username, telegram_id) "
                "VALUES (%s, %s, %s, %s, %s, %s, %s, %s)",
                (booking_id, user_id, comp_id, hour, booking_date, phone_number, telegram_username, telegram_id)
            )
            conn.commit()
            logger.info(f"Booked computer: user_id={user_id}, telegram_id={telegram_id}, computer_id={comp_id}, time={hour}, booking_id={booking_id}, username={telegram_username}")
            return booking_id
    except mysql.connector.Error as e:
        logger.error(f"Database error in book_computer: {e} (errno: {e.errno})")
        return None

def get_user_bookings(user_id):
    cleanup_expired_bookings()
    try:
        with get_db_connection() as conn, conn.cursor() as cursor:
            if conn is None:
                return []
            cursor.execute(
                "SELECT computer_id, booking_time, phone_number, booking_id, booking_date, telegram_id FROM bookings "
                "WHERE user_id = %s ORDER BY booking_date, booking_time",
                (user_id,)
            )
            return cursor.fetchall()
    except mysql.connector.Error as e:
        logger.error(f"Database error in get_user_bookings: {e}")
        return []

def get_upcoming_bookings():
    cleanup_expired_bookings()
    try:
        with get_db_connection() as conn, conn.cursor() as cursor:
            if conn is None:
                return []
            cursor.execute("SELECT booking_id, user_id, computer_id, booking_time, phone_number, booking_date, telegram_id FROM bookings")
            return cursor.fetchall()
    except mysql.connector.Error as e:
        logger.error(f"Database error in get_upcoming_bookings: {e}")
        return []

def get_formatted_date(booking_date):
    months = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
    if isinstance(booking_date, date):
        date_obj = booking_date
    else:
        date_obj = datetime.strptime(booking_date, '%Y-%m-%d')
    return f"{date_obj.day} {months[date_obj.month - 1]} {date_obj.year}"

def is_tomorrow_booking():
    return datetime.now(pytz.timezone('Europe/Moscow')).hour >= 19

WELCOME_MESSAGE = (
    "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª—É–± *N1NTENDO*! üéÆ\n\n"
    "–≠—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–ª–µ—á—å—Å—è –æ—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —Ä—É—Ç–∏–Ω—ã, –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∏–≥—Ä–∞–º–∏ –∏ –æ–±—â–µ–Ω–∏–µ–º.\n\n"
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä."
)

UNLINKED_MESSAGE = (
    "üéÆ –ü—Ä–∏–≤–µ—Ç, –≥–µ–π–º–µ—Ä! üéÆ\n\n"
    "–ß—Ç–æ–±—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –≤ *N1NTENDO*, –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–≤–æ–π Telegram-–∞–∫–∫–∞—É–Ω—Ç –∫ —Å–∞–π—Ç—É.\n\n"
    "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ —Å–∞–π—Ç–µ: [N1NTENDO](http://loaderaw.ru/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%201/dashboard.php)\n"
    "2. –í–æ–π–¥–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –ø–æ–ª—É—á–∏ –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏\n"
    "3. –û—Ç–ø—Ä–∞–≤—å –∫–æ–¥ —Å—é–¥–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: `/link <—Ç–≤–æ–π_–∫–æ–¥>`\n\n"
    "–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –ø—Ä—è–º–æ –∑–¥–µ—Å—å! üöÄ"
)

async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    while True:
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        current_hour, current_minute = now.hour, now.minute
        try:
            bookings = get_upcoming_bookings()
            for booking_id, user_id, computer_id, booking_time, phone_number, booking_date, telegram_id in bookings:
                booking_datetime = datetime.combine(booking_date, datetime.min.time()) + timedelta(hours=booking_time)
                booking_datetime = pytz.timezone('Europe/Moscow').localize(booking_datetime)
                if booking_datetime.date() == now.date() and booking_time == current_hour and 45 <= current_minute <= 50:
                    formatted_date = get_formatted_date(booking_date)
                    start_time = datetime.now()
                    await context.bot.send_message(
                        chat_id=telegram_id,
                        text=(
                            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!\n\n"
                            f"–î–∞—Ç–∞: {formatted_date}\n"
                            f"–ö–æ–º–ø—å—é—Ç–µ—Ä: PC{computer_id}\n"
                            f"–í—Ä–µ–º—è: —Å {booking_time}:00 –¥–æ {booking_time + 1}:00\n"
                            f"–í–∞—à –Ω–æ–º–µ—Ä: {phone_number}\n"
                            f"–ö–æ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: *{booking_id}*"
                        ),
                        parse_mode='Markdown'
                    )
                    logger.info(f"Reminder sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
                    await asyncio.sleep(0.2)
        except Exception as e:
            logger.error(f"Error in send_reminders: {e}")
        await asyncio.sleep(60)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    telegram_username = f"@{update.message.from_user.username}" if update.message.from_user.username else None
    if not telegram_username:
        start_time = datetime.now()
        await update.message.reply_text(
            "üö´ –û—à–∏–±–∫–∞: —É –≤–∞—à–µ–≥–æ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode='Markdown'
        )
        logger.info(f"No username error sent to telegram_id={user_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    if not is_telegram_linked(telegram_username):
        start_time = datetime.now()
        await update.message.reply_text(
            UNLINKED_MESSAGE,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        logger.info(f"Unlinked account message sent to telegram_id={user_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    keyboard = [[InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="book")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    start_time = datetime.now()
    await update.message.reply_text(
        WELCOME_MESSAGE,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    logger.info(f"Start message sent to telegram_id={user_id} in {(datetime.now() - start_time).total_seconds()} seconds")
    await asyncio.sleep(0.2)

async def link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.message.from_user.id
    telegram_username = f"@{update.message.from_user.username}" if update.message.from_user.username else None
    if not telegram_username:
        start_time = datetime.now()
        await update.message.reply_text(
            "üö´ –û—à–∏–±–∫–∞: —É –≤–∞—à–µ–≥–æ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode='Markdown'
        )
        logger.info(f"No username error sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    if is_telegram_linked(telegram_username):
        start_time = datetime.now()
        await update.message.reply_text(
            "‚úÖ –í–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∞–π—Ç—É! –í—ã –º–æ–∂–µ—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä—ã —Å –ø–æ–º–æ—â—å—é /start.",
            parse_mode='Markdown'
        )
        logger.info(f"Already linked message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    if not context.args:
        start_time = datetime.now()
        await update.message.reply_text(
            "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: `/link 1234567890abcdef`",
            parse_mode='Markdown'
        )
        logger.info(f"No code provided message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    code = context.args[0].strip()
    success, message = link_telegram_account(telegram_id, telegram_username, code)
    start_time = datetime.now()
    await update.message.reply_text(
        message,
        parse_mode='Markdown'
    )
    logger.info(f"Link result ({'success' if success else 'failure'}) sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
    await asyncio.sleep(0.2)
    if success:
        keyboard = [[InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="book")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            WELCOME_MESSAGE,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"Welcome message sent to telegram_id={telegram_id} after linking in {(datetime.now() - start_time).total_seconds()} seconds")

async def book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.message.from_user.id
    telegram_username = f"@{update.message.from_user.username}" if update.message.from_user.username else None
    if not telegram_username:
        start_time = datetime.now()
        await update.message.reply_text(
            "üö´ –û—à–∏–±–∫–∞: —É –≤–∞—à–µ–≥–æ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode='Markdown'
        )
        logger.info(f"No username error sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    if not is_telegram_linked(telegram_username):
        start_time = datetime.now()
        await update.message.reply_text(
            UNLINKED_MESSAGE,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        logger.info(f"Unlinked account message sent to telegram_id={telegram_id} with username={telegram_username} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    config = configparser.ConfigParser()
    config.read('bot.cfg')
    image_file = config['DEFAULT']['ImageFile']
    booking_count = get_user_booking_count(telegram_id)
    if booking_count >= 2:
        bookings = get_user_bookings(telegram_id)
        response = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. üòî\n\nüìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        for comp_id, booking_time, phone_number, booking_id, booking_date, telegram_id in bookings:
            date_str = booking_date.strftime('%d.%m.%Y')
            response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
        start_time = datetime.now()
        await update.message.reply_text(response, parse_mode='Markdown')
        logger.info(f"Booking limit message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    if booking_count == 1:
        bookings = get_user_bookings(telegram_id)
        response = "üìã –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        for comp_id, booking_time, phone_number, booking_id, booking_date, telegram_id in bookings:
            date_str = booking_date.strftime('%d.%m.%Y')
            response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
        response += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä:"
        start_time = datetime.now()
        await update.message.reply_text(response, parse_mode='Markdown')
        logger.info(f"Current booking message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
    keyboard = [[InlineKeyboardButton(f"PC{row * 5 + col + 1}", callback_data=f"comp_{row * 5 + col + 1}")
                for col in range(5)] for row in range(4)]
    reply_markup = InlineKeyboardMarkup(keyboard)
    caption = "–í—ã–±–µ—Ä–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä:" if not is_tomorrow_booking() else "–í—ã–±–µ—Ä–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞):"
    try:
        with open(image_file, 'rb') as photo:
            start_time = datetime.now()
            await update.message.reply_photo(
                photo=photo,
                caption=caption,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            logger.info(f"Computer selection photo sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
    except FileNotFoundError:
        logger.error(f"Image file {image_file} not found")
        start_time = datetime.now()
        await update.message.reply_text(caption, reply_markup=reply_markup, parse_mode='Markdown')
        logger.info(f"Computer selection text sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
    await asyncio.sleep(0.2)

async def bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.message.from_user.id
    telegram_username = f"@{update.message.from_user.username}" if update.message.from_user.username else None
    if not telegram_username:
        start_time = datetime.now()
        await update.message.reply_text(
            "üö´ –û—à–∏–±–∫–∞: —É –≤–∞—à–µ–≥–æ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode='Markdown'
        )
        logger.info(f"No username error sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    if not is_telegram_linked(telegram_username):
        start_time = datetime.now()
        await update.message.reply_text(
            UNLINKED_MESSAGE,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        logger.info(f"Unlinked account message sent to telegram_id={telegram_id} with username={telegram_username} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    bookings = get_user_bookings(telegram_id)
    if not bookings:
        keyboard = [[InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="book")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        start_time = datetime.now()
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"No bookings message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    response = "üìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    for comp_id, booking_time, phone_number, booking_id, booking_date, telegram_id in bookings:
        date_str = booking_date.strftime('%d.%m.%Y')
        response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
    start_time = datetime.now()
    await update.message.reply_text(response, parse_mode='Markdown')
    logger.info(f"Bookings list sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
    await asyncio.sleep(0.2)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    config = configparser.ConfigParser()
    config.read('bot.cfg')
    image_file = config['DEFAULT']['ImageFile']
    telegram_id = query.from_user.id
    telegram_username = f"@{query.from_user.username}" if query.from_user.username else None
    if not telegram_username:
        start_time = datetime.now()
        await query.message.reply_text(
            "üö´ –û—à–∏–±–∫–∞: —É –≤–∞—à–µ–≥–æ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode='Markdown'
        )
        logger.info(f"No username error sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    if not is_telegram_linked(telegram_username):
        start_time = datetime.now()
        await query.message.reply_text(
            UNLINKED_MESSAGE,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        logger.info(f"Unlinked account message sent to telegram_id={telegram_id} with username={telegram_username} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    if query.data == "book":
        booking_count = get_user_booking_count(telegram_id)
        if booking_count >= 2:
            bookings = get_user_bookings(telegram_id)
            response = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. üòî\n\nüìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            for comp_id, booking_time, phone_number, booking_id, booking_date, telegram_id in bookings:
                date_str = booking_date.strftime('%d.%m.%Y')
                response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
            start_time = datetime.now()
            await query.message.reply_text(response, parse_mode='Markdown')
            logger.info(f"Booking limit message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
            await asyncio.sleep(0.2)
            return
        if booking_count == 1:
            bookings = get_user_bookings(telegram_id)
            response = "üìã –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
            for comp_id, booking_time, phone_number, booking_id, booking_date, telegram_id in bookings:
                date_str = booking_date.strftime('%d.%m.%Y')
                response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
            response += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä:"
            start_time = datetime.now()
            await query.message.reply_text(response, parse_mode='Markdown')
            logger.info(f"Current booking message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
            await asyncio.sleep(0.2)
        keyboard = [[InlineKeyboardButton(f"PC{row * 5 + col + 1}", callback_data=f"comp_{row * 5 + col + 1}")
                    for col in range(5)] for row in range(4)]
        reply_markup = InlineKeyboardMarkup(keyboard)
        caption = "–í—ã–±–µ—Ä–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä:" if not is_tomorrow_booking() else "–í—ã–±–µ—Ä–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞):"
        try:
            with open(image_file, 'rb') as photo:
                start_time = datetime.now()
                await query.message.reply_photo(
                    photo=photo,
                    caption=caption,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                logger.info(f"Computer selection photo sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        except FileNotFoundError:
            logger.error(f"Image file {image_file} not found")
            start_time = datetime.now()
            await query.message.reply_text(caption, reply_markup=reply_markup, parse_mode='Markdown')
            logger.info(f"Computer selection text sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
    elif query.data.startswith("comp_"):
        comp_num = int(query.data.split("_")[1])
        if get_user_booking_count(telegram_id) >= 2:
            bookings = get_user_bookings(telegram_id)
            response = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. üòî\n\nüìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            for comp_id, booking_time, phone_number, booking_id, booking_date, telegram_id in bookings:
                date_str = booking_date.strftime('%d.%m.%Y')
                response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
            start_time = datetime.now()
            await query.message.reply_text(response, parse_mode='Markdown')
            logger.info(f"Booking limit message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
            await asyncio.sleep(0.2)
            return
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        current_hour = now.hour
        keyboard = []
        booked_hours = []
        context.user_data['booked_hours_cache'] = context.user_data.get('booked_hours_cache', {})
        cache_key = f"{comp_num}_{now.date()}"
        if cache_key not in context.user_data['booked_hours_cache']:
            for i in range(8, 20, 4):
                row = []
                for hour in range(i, min(i + 4, 20)):
                    if is_computer_booked(comp_num, hour):
                        booked_hours.append(hour)
                    elif not is_tomorrow_booking() and hour < current_hour:
                        continue
                    else:
                        row.append(InlineKeyboardButton(f"{hour}:00", callback_data=f"time_{comp_num}_{hour}"))
                if row:
                    keyboard.append(row)
            context.user_data['booked_hours_cache'][cache_key] = booked_hours
        else:
            booked_hours = context.user_data['booked_hours_cache'][cache_key]
            for i in range(8, 20, 4):
                row = []
                for hour in range(i, min(i + 4, 20)):
                    if hour in booked_hours:
                        continue
                    elif not is_tomorrow_booking() and hour < current_hour:
                        continue
                    else:
                        row.append(InlineKeyboardButton(f"{hour}:00", callback_data=f"time_{comp_num}_{hour}"))
                if row:
                    keyboard.append(row)
        if booked_hours:
            keyboard.append([InlineKeyboardButton(f"~~{hour}:00~~", callback_data="unavailable") for hour in booked_hours])
        if not any(row for row in keyboard if any(btn.callback_data != "unavailable" for btn in row)):
            start_time = datetime.now()
            await query.message.reply_text(f"–ù–∞ PC{comp_num} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å–æ–≤. üòî", parse_mode='Markdown')
            logger.info(f"No available hours message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
            await asyncio.sleep(0.2)
            return
        reply_markup = InlineKeyboardMarkup(keyboard)
        start_time = datetime.now()
        await query.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è PC{comp_num}:", reply_markup=reply_markup, parse_mode='Markdown')
        logger.info(f"Time selection message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
    elif query.data == "unavailable":
        start_time = datetime.now()
        await query.message.reply_text(f"–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ. üòî", parse_mode='Markdown')
        logger.info(f"Unavailable time message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
    elif query.data.startswith("time_"):
        _, comp_num, hour = query.data.split("_")
        comp_num, hour = int(comp_num), int(hour)
        if is_computer_booked(comp_num, hour):
            start_time = datetime.now()
            await query.message.reply_text(f"PC{comp_num} –Ω–∞ {hour}:00 —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω. üòî", parse_mode='Markdown')
            logger.info(f"Booked time message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
            await asyncio.sleep(0.2)
            return
        context.user_data['comp_num'] = comp_num
        context.user_data['hour'] = hour
        context.user_data['timestamp'] = datetime.now()
        start_time = datetime.now()
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79881373428):", parse_mode='Markdown')
        logger.info(f"Phone number request sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
    elif query.data.startswith("confirm_"):
        comp_num = context.user_data.get('comp_num')
        hour = context.user_data.get('hour')
        phone_number = context.user_data.get('phone_number')
        if not all([comp_num, hour, phone_number]):
            start_time = datetime.now()
            await query.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.", parse_mode='Markdown')
            logger.info(f"Expired booking data message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
            context.user_data.clear()
            await asyncio.sleep(0.2)
            return
        if is_computer_booked(comp_num, hour):
            start_time = datetime.now()
            await query.message.reply_text(f"PC{comp_num} –Ω–∞ {hour}:00 —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω. üòî", parse_mode='Markdown')
            logger.info(f"Booked time message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
            context.user_data.clear()
            await asyncio.sleep(0.2)
            return
        try:
            with get_db_connection() as conn, conn.cursor() as cursor:
                if conn is None:
                    logger.error("No database connection available")
                    return None
                cursor.execute(
                    "SELECT user_id FROM telegram_links WHERE telegram_id = %s AND is_linked = %s",
                    (telegram_id, True)
                )
                user_id = cursor.fetchone()
                if not user_id:
                    start_time = datetime.now()
                    await query.message.reply_text("–û—à–∏–±–∫–∞: –≤–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link.", parse_mode='Markdown')
                    logger.info(f"Unlinked account error sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
                    context.user_data.clear()
                    await asyncio.sleep(0.2)
                    return
                user_id = user_id[0]
        except mysql.connector.Error as e:
            logger.error(f"Database error in fetching user_id: {e}")
            start_time = datetime.now()
            await query.message.reply_text("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode='Markdown')
            logger.info(f"Database error message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
            context.user_data.clear()
            await asyncio.sleep(0.2)
            return
        booking_id = book_computer(user_id, comp_num, hour, phone_number, telegram_username, telegram_id)
        if not booking_id:
            start_time = datetime.now()
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode='Markdown')
            logger.info(f"Booking failure message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
            context.user_data.clear()
            await asyncio.sleep(0.2)
            return
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        booking_date = now.date() if now.hour < 19 else (now + timedelta(days=1)).date()
        formatted_date = get_formatted_date(booking_date)
        keyboard = [[InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä", callback_data="book")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        start_time = datetime.now()
        await query.message.reply_text(
            f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"–î–∞—Ç–∞: {formatted_date}\n"
            f"–ö–æ–º–ø—å—é—Ç–µ—Ä: PC{comp_num}\n"
            f"–í—Ä–µ–º—è: —Å {hour}:00 –¥–æ {hour + 1}:00\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä: {phone_number}\n"
            f"–ö–æ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: *{booking_id}*\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"Booking confirmation sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        context.user_data.clear()
        await asyncio.sleep(0.2)
    elif query.data == "cancel":
        start_time = datetime.now()
        await query.message.reply_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.", parse_mode='Markdown')
        logger.info(f"Booking cancellation message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        context.user_data.clear()
        await asyncio.sleep(0.2)

async def handle_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.message.from_user.id
    telegram_username = f"@{update.message.from_user.username}" if update.message.from_user.username else None
    if not telegram_username:
        start_time = datetime.now()
        await update.message.reply_text(
            "üö´ –û—à–∏–±–∫–∞: —É –≤–∞—à–µ–≥–æ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode='Markdown'
        )
        logger.info(f"No username error sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    if not is_telegram_linked(telegram_username):
        start_time = datetime.now()
        await update.message.reply_text(
            UNLINKED_MESSAGE,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        logger.info(f"Unlinked account message sent to telegram_id={telegram_id} with username={telegram_username} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    if 'comp_num' not in context.user_data or 'hour' not in context.user_data:
        start_time = datetime.now()
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ —Å /start.",
            parse_mode='Markdown'
        )
        logger.info(f"Invalid booking data message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    timestamp = context.user_data.get('timestamp')
    if timestamp and (datetime.now() - timestamp).total_seconds() > 300:
        start_time = datetime.now()
        await update.message.reply_text(
            "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.",
            parse_mode='Markdown'
        )
        logger.info(f"Timeout message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        context.user_data.clear()
        await asyncio.sleep(0.2)
        return
    phone_number = update.message.text.strip()
    comp_num = context.user_data['comp_num']
    hour = context.user_data['hour']
    if not phone_number.startswith("+") or len(phone_number) < 10:
        start_time = datetime.now()
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79881373428):",
            parse_mode='Markdown'
        )
        logger.info(f"Invalid phone number message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        await asyncio.sleep(0.2)
        return
    if get_user_booking_count(telegram_id) >= 2:
        bookings = get_user_bookings(telegram_id)
        response = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. üòî\n\nüìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        for comp_id, booking_time, phone_number, booking_id, booking_date, telegram_id in bookings:
            date_str = booking_date.strftime('%d.%m.%Y')
            response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
        start_time = datetime.now()
        await update.message.reply_text(response, parse_mode='Markdown')
        logger.info(f"Booking limit message sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
        context.user_data.clear()
        await asyncio.sleep(0.2)
        return
    context.user_data['phone_number'] = phone_number
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    booking_date = now.date() if now.hour < 19 else (now + timedelta(days=1)).date()
    formatted_date = get_formatted_date(booking_date)
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{comp_num}_{hour}"),
         InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    start_time = datetime.now()
    await update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        f"–î–∞—Ç–∞: {formatted_date}\n"
        f"–ö–æ–º–ø—å—é—Ç–µ—Ä: PC{comp_num}\n"
        f"–í—Ä–µ–º—è: —Å {hour}:00 –¥–æ {hour + 1}:00\n"
        f"–í–∞—à –Ω–æ–º–µ—Ä: {phone_number}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ '–û—Ç–º–µ–Ω–∏—Ç—å' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    logger.info(f"Booking confirmation prompt sent to telegram_id={telegram_id} in {(datetime.now() - start_time).total_seconds()} seconds")
    await asyncio.sleep(0.2)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")

def main():
    config = configparser.ConfigParser()
    config.read('bot.cfg')
    bot_token = config['DEFAULT']['BotToken']
    application = Application.builder().token(bot_token).build()
    application.job_queue.run_once(send_reminders, when=0)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("book", book))
    application.add_handler(CommandHandler("bookings", bookings))
    application.add_handler(CommandHandler("link", link))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone_number))
    application.add_error_handler(error_handler)
    application.run_polling()

if __name__ == '__main__':
    main()