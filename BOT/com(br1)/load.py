import logging
import sqlite3
import random
import asyncio
from datetime import datetime, timedelta
import pytz
import configparser
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

def init_db():
    conn = sqlite3.connect('computers.db')
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS computers (id INTEGER PRIMARY KEY, status BOOLEAN NOT NULL)')
    cursor.execute('CREATE TABLE IF NOT EXISTS bookings (booking_id TEXT PRIMARY KEY, user_id INTEGER NOT NULL, computer_id INTEGER NOT NULL, booking_time INTEGER NOT NULL, booking_date TEXT NOT NULL, phone_number TEXT NOT NULL)')
    cursor.execute('SELECT COUNT(*) FROM computers')
    count = cursor.fetchone()[0]
    if count == 0:
        for i in range(1, 21):
            cursor.execute('INSERT INTO computers (id, status) VALUES (?, ?)', (i, 0))
        conn.commit()
    conn.close()

def migrate_db():
    conn = sqlite3.connect('computers.db')
    cursor = conn.cursor()
    try:
        cursor.execute('ALTER TABLE bookings ADD COLUMN booking_date TEXT')
        cursor.execute('UPDATE bookings SET booking_date = ?', (datetime.now(pytz.timezone('Europe/Moscow')).date().strftime('%Y-%m-%d'),))
        conn.commit()
    except sqlite3.OperationalError:
        pass
    conn.close()

def is_computer_booked(comp_id, hour):
    conn = sqlite3.connect('computers.db')
    cursor = conn.cursor()
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    booking_date = now.date()
    if now.hour >= 19:
        booking_date = (now + timedelta(days=1)).date()
    cursor.execute('SELECT COUNT(*) FROM bookings WHERE computer_id = ? AND booking_time = ? AND booking_date = ?',
                   (comp_id, hour, booking_date.strftime('%Y-%m-%d')))
    count = cursor.fetchone()[0]
    conn.close()
    return count > 0

def cleanup_expired_bookings():
    conn = sqlite3.connect('computers.db')
    cursor = conn.cursor()
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    cursor.execute('SELECT booking_id, booking_time, booking_date FROM bookings')
    bookings = cursor.fetchall()
    for booking_id, booking_time, booking_date in bookings:
        try:
            booking_datetime = datetime.strptime(f"{booking_date} {booking_time}:00", '%Y-%m-%d %H:%M')
            booking_datetime = pytz.timezone('Europe/Moscow').localize(booking_datetime)
            if now >= booking_datetime + timedelta(hours=1):
                cursor.execute('DELETE FROM bookings WHERE booking_id = ?', (booking_id,))
        except ValueError:
            logger.warning(f"Invalid booking date format for booking_id {booking_id}")
    conn.commit()
    conn.close()

def get_user_booking_count(user_id):
    cleanup_expired_bookings()
    conn = sqlite3.connect('computers.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM bookings WHERE user_id = ?', (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count

def generate_booking_code():
    conn = sqlite3.connect('computers.db')
    cursor = conn.cursor()
    while True:
        code = str(random.randint(1000, 9999))
        cursor.execute('SELECT COUNT(*) FROM bookings WHERE booking_id = ?', (code,))
        if cursor.fetchone()[0] == 0:
            conn.close()
            return code
    conn.close()

def book_computer(user_id, comp_id, hour, phone_number):
    conn = sqlite3.connect('computers.db')
    cursor = conn.cursor()
    booking_id = generate_booking_code()
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    booking_date = now.date()
    if now.hour >= 19:
        booking_date = (now + timedelta(days=1)).date()
    cursor.execute('INSERT INTO bookings (booking_id, user_id, computer_id, booking_time, booking_date, phone_number) VALUES (?, ?, ?, ?, ?, ?)',
                   (booking_id, user_id, comp_id, hour, booking_date.strftime('%Y-%m-%d'), phone_number))
    conn.commit()
    conn.close()
    return booking_id

def get_user_bookings(user_id):
    cleanup_expired_bookings()
    conn = sqlite3.connect('computers.db')
    cursor = conn.cursor()
    cursor.execute('SELECT computer_id, booking_time, phone_number, booking_id, booking_date FROM bookings WHERE user_id = ? ORDER BY booking_date, booking_time', (user_id,))
    bookings = cursor.fetchall()
    conn.close()
    return bookings

def get_upcoming_bookings():
    cleanup_expired_bookings()
    conn = sqlite3.connect('computers.db')
    cursor = conn.cursor()
    cursor.execute('SELECT booking_id, user_id, computer_id, booking_time, phone_number, booking_date FROM bookings')
    bookings = cursor.fetchall()
    conn.close()
    return bookings

def get_formatted_date(booking_date):
    months = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
    date_obj = datetime.strptime(booking_date, '%Y-%m-%d')
    day = date_obj.day
    month = months[date_obj.month - 1]
    year = date_obj.year
    return f"{day} {month} {year}"

def is_tomorrow_booking():
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    return now.hour >= 19

WELCOME_MESSAGE = (
    "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª—É–± *N1NTENDO*! üéÆ\n\n"
    "–≠—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–ª–µ—á—å—Å—è –æ—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —Ä—É—Ç–∏–Ω—ã, –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∏–≥—Ä–∞–º–∏ –∏ –æ–±—â–µ–Ω–∏–µ–º.\n\n"
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä."
)

async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    while True:
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        current_hour = now.hour
        current_minute = now.minute
        bookings = get_upcoming_bookings()
        for booking_id, user_id, computer_id, booking_time, phone_number, booking_date in bookings:
            booking_datetime = datetime.strptime(f"{booking_date} {booking_time}:00", '%Y-%m-%d %H:%M')
            booking_datetime = pytz.timezone('Europe/Moscow').localize(booking_datetime)
            if booking_datetime.date() == now.date() and booking_time == current_hour and 45 <= current_minute <= 50:
                formatted_date = get_formatted_date(booking_date)
                await context.bot.send_message(
                    chat_id=user_id,
                    text=(
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!\n\n"
                        f"–î–∞—Ç–∞: {formatted_date}\n"
                        f"–ö–æ–º–ø—å—é—Ç–µ—Ä: PC{computer_id}\n"
                        f"–í—Ä–µ–º—è: —Å {booking_time}:00 –¥–æ {booking_time + 1}:00\n"
                        f"–í–∞—à –Ω–æ–º–µ—Ä: {phone_number}\n"
                        f"–ö–æ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: *{booking_id}*"
                    ),
                    parse_mode='Markdown'
                )
        await asyncio.sleep(60)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="book")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        WELCOME_MESSAGE,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    config = configparser.ConfigParser()
    config.read('bot.cfg')
    image_file = config['DEFAULT']['ImageFile']
    booking_count = get_user_booking_count(user_id)
    if booking_count >= 2:
        bookings = get_user_bookings(user_id)
        response = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. üòî\n\nüìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        for comp_id, booking_time, phone_number, booking_id, booking_date in bookings:
            date_str = datetime.strptime(booking_date, '%Y-%m-%d').strftime('%d.%m.%Y')
            response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
        await update.message.reply_text(
            response,
            parse_mode='Markdown'
        )
        return
    if booking_count == 1:
        bookings = get_user_bookings(user_id)
        response = "üìã –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        for comp_id, booking_time, phone_number, booking_id, booking_date in bookings:
            date_str = datetime.strptime(booking_date, '%Y-%m-%d').strftime('%d.%m.%Y')
            response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
        response += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä:"
        await update.message.reply_text(
            response,
            parse_mode='Markdown'
        )
    keyboard = []
    for row in range(4):
        row_buttons = []
        for col in range(5):
            comp_num = row * 5 + col + 1
            row_buttons.append(InlineKeyboardButton(f"PC{comp_num}", callback_data=f"comp_{comp_num}"))
        keyboard.append(row_buttons)
    reply_markup = InlineKeyboardMarkup(keyboard)
    caption = "–í—ã–±–µ—Ä–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä:" if not is_tomorrow_booking() else "–í—ã–±–µ—Ä–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞):"
    with open(image_file, 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption=caption,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    bookings = get_user_bookings(user_id)
    if not bookings:
        keyboard = [[InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="book")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    response = "üìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    for comp_id, booking_time, phone_number, booking_id, booking_date in bookings:
        date_str = datetime.strptime(booking_date, '%Y-%m-%d').strftime('%d.%m.%Y')
        response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
    await update.message.reply_text(
        response,
        parse_mode='Markdown'
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    config = configparser.ConfigParser()
    config.read('bot.cfg')
    image_file = config['DEFAULT']['ImageFile']
    user_id = query.from_user.id
    if query.data == "book":
        booking_count = get_user_booking_count(user_id)
        if booking_count >= 2:
            bookings = get_user_bookings(user_id)
            response = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. üòî\n\nüìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            for comp_id, booking_time, phone_number, booking_id, booking_date in bookings:
                date_str = datetime.strptime(booking_date, '%Y-%m-%d').strftime('%d.%m.%Y')
                response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
            await query.message.reply_text(
                response,
                parse_mode='Markdown'
            )
            return
        if booking_count == 1:
            bookings = get_user_bookings(user_id)
            response = "üìã –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
            for comp_id, booking_time, phone_number, booking_id, booking_date in bookings:
                date_str = datetime.strptime(booking_date, '%Y-%m-%d').strftime('%d.%m.%Y')
                response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
            response += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä:"
            await query.message.reply_text(
                response,
                parse_mode='Markdown'
            )
        keyboard = []
        for row in range(4):
            row_buttons = []
            for col in range(5):
                comp_num = row * 5 + col + 1
                row_buttons.append(InlineKeyboardButton(f"PC{comp_num}", callback_data=f"comp_{comp_num}"))
            keyboard.append(row_buttons)
        reply_markup = InlineKeyboardMarkup(keyboard)
        caption = "–í—ã–±–µ—Ä–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä:" if not is_tomorrow_booking() else "–í—ã–±–µ—Ä–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞):"
        with open(image_file, 'rb') as photo:
            await query.message.reply_photo(
                photo=photo,
                caption=caption,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    elif query.data.startswith("comp_"):
        comp_num = int(query.data.split("_")[1])
        if get_user_booking_count(user_id) >= 2:
            bookings = get_user_bookings(user_id)
            response = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. üòî\n\nüìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            for comp_id, booking_time, phone_number, booking_id, booking_date in bookings:
                date_str = datetime.strptime(booking_date, '%Y-%m-%d').strftime('%d.%m.%Y')
                response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
            await query.message.reply_text(
                response,
                parse_mode='Markdown'
            )
            return
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        current_hour = now.hour
        keyboard = []
        booked_hours = []
        for i in range(8, 20, 4):
            row = []
            for hour in range(i, min(i + 4, 20)):
                if is_computer_booked(comp_num, hour):
                    booked_hours.append(hour)
                elif not is_tomorrow_booking() and hour < current_hour:
                    continue
                else:
                    row.append(InlineKeyboardButton(f"{hour}:00", callback_data=f"time_{comp_num}_{hour}"))
            if row:
                keyboard.append(row)
        if booked_hours:
            booked_row = []
            for hour in booked_hours:
                booked_row.append(InlineKeyboardButton(f"~~{hour}:00~~", callback_data="unavailable"))
            keyboard.append(booked_row)
        if not any(row for row in keyboard if any(btn.callback_data != "unavailable" for btn in row)):
            await query.message.reply_text(
                f"–ù–∞ PC{comp_num} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å–æ–≤. üòî",
                parse_mode='Markdown'
            )
            return
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è PC{comp_num}:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    elif query.data == "unavailable":
        await query.message.reply_text(
            f"–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ. üòî",
            parse_mode='Markdown'
        )
    elif query.data.startswith("time_"):
        _, comp_num, hour = query.data.split("_")
        comp_num = int(comp_num)
        hour = int(hour)
        if is_computer_booked(comp_num, hour):
            await query.message.reply_text(
                f"PC{comp_num} –Ω–∞ {hour}:00 —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω. üòî",
                parse_mode='Markdown'
            )
            return
        context.user_data['comp_num'] = comp_num
        context.user_data['hour'] = hour
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79881373428):",
            parse_mode='Markdown'
        )

async def handle_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'comp_num' not in context.user_data or 'hour' not in context.user_data:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ —Å /start.",
            parse_mode='Markdown'
        )
        return
    phone_number = update.message.text.strip()
    comp_num = context.user_data['comp_num']
    hour = context.user_data['hour']
    user_id = update.message.from_user.id
    if not phone_number.startswith("+") or len(phone_number) < 10:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79881373428):",
            parse_mode='Markdown'
        )
        return
    if get_user_booking_count(user_id) >= 2:
        bookings = get_user_bookings(user_id)
        response = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. üòî\n\nüìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        for comp_id, booking_time, phone_number, booking_id, booking_date in bookings:
            date_str = datetime.strptime(booking_date, '%Y-%m-%d').strftime('%d.%m.%Y')
            response += f"PC{comp_id} | {date_str} —Å {booking_time}:00 –¥–æ {booking_time + 1}:00 | {phone_number} | –ö–æ–¥: {booking_id}\n"
        await update.message.reply_text(
            response,
            parse_mode='Markdown'
        )
        return
    booking_id = book_computer(user_id, comp_num, hour, phone_number)
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    booking_date = now.date()
    if now.hour >= 19:
        booking_date = (now + timedelta(days=1)).date()
    formatted_date = get_formatted_date(booking_date.strftime('%Y-%m-%d'))
    keyboard = [[InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä", callback_data="book")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"–î–∞—Ç–∞: {formatted_date}\n"
        f"–ö–æ–º–ø—å—é—Ç–µ—Ä: PC{comp_num}\n"
        f"–í—Ä–µ–º—è: —Å {hour}:00 –¥–æ {hour + 1}:00\n"
        f"–í–∞—à –Ω–æ–º–µ—Ä: {phone_number}\n"
        f"–ö–æ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: *{booking_id}*\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    context.user_data.clear()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")

def main():
    init_db()
    migrate_db()
    config = configparser.ConfigParser()
    config.read('bot.cfg')
    bot_token = config['DEFAULT']['BotToken']
    application = Application.builder().token(bot_token).build()
    application.job_queue.run_once(send_reminders, when=0)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("book", book))
    application.add_handler(CommandHandler("bookings", bookings))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone_number))
    application.add_error_handler(error_handler)
    application.run_polling()

if __name__ == '__main__':
    main()